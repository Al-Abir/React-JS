ভ্যানিলা জাভাস্ক্রিপ্ট বনাম রিয়্যাক্ট জেএস: উদাহরণ এবং ব্যাখ্যা
ভ্যানিলা জাভাস্ক্রিপ্ট এবং রিয়্যাক্ট জেএস-এর মধ্যে পার্থক্য বোঝার জন্য, আসুন প্রথমে প্রতিটি কি তা সংজ্ঞায়িত করি এবং তারপর একটি উদাহরণ দেখে বুঝি কিভাবে তারা একই কাজ করে।

ভ্যানিলা জাভাস্ক্রিপ্ট কী?
ভ্যানিলা জাভাস্ক্রিপ্ট বলতে কোনো ফ্রেমওয়ার্ক বা লাইব্রেরি ছাড়াই মূল জাভাস্ক্রিপ্টকে বোঝায়। এটি ব্রাউজারে রান করে এবং ডকুমেন্ট অবজেক্ট মডেল (DOM) সরাসরি ম্যানিপুলেট করার সুযোগ দেয়।

রিয়্যাক্ট জেএস কী?
রিয়্যাক্ট জেএস হলো একটি জনপ্রিয় জাভাস্ক্রিপ্ট লাইব্রেরি, যা ইউজার ইন্টারফেস তৈরি করতে ব্যবহৃত হয়, বিশেষ করে সিঙ্গেল-পেজ অ্যাপ্লিকেশনের ক্ষেত্রে। রিয়্যাক্ট ডম ম্যানিপুলেশনকে সহজ করে এবং ইউজার ইন্টারফেসের বিভিন্ন কম্পোনেন্ট এবং তাদের স্টেট ডিফাইন করার একটি ডিক্লারেটিভ পদ্ধতি প্রদান করে, যা ডেভেলপমেন্ট প্রসেসকে আরও দক্ষ এবং ব্যবস্থাপনা-যোগ্য করে তোলে।

উদাহরণ: একটি সহজ কাউন্টার অ্যাপ্লিকেশন তৈরি করা
আসুন একটি সাধারণ উদাহরণ দেখি যেখানে একটি কাউন্টার আছে যা বাটনে ক্লিক করলে সংখ্যা বাড়ায় এবং কমায়। আমরা এই উদাহরণটি উভয় ভ্যানিলা জাভাস্ক্রিপ্ট এবং রিয়্যাক্ট জেএস-এ তৈরি করবো।

১. ভ্যানিলা জাভাস্ক্রিপ্ট উদাহরণ
ভ্যানিলা জাভাস্ক্রিপ্টে, আমরা ডম (DOM) সরাসরি ম্যানিপুলেট করে বাটন ক্লিক হ্যান্ডেল করবো এবং সংখ্যা আপডেট করবো।
ব্যাখ্যা:
HTML code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vanilla JS Counter</title>
</head>
<body>
    <div id="counter-app">
        <h1>Counter: <span id="counter-value">0</span></h1>
        <button id="increment-btn">Increment</button>
        <button id="decrement-btn">Decrement</button>
    </div>

    <script src="counter.js"></script>
</body>
</html>

//JavaScript Code

let counter = 0;

const counterValue = document.getElementById('counter-value');
const incrementBtn = document.getElementById('increment-btn');
const decrementBtn = document.getElementById('decrement-btn');

incrementBtn.addEventListener('click', () => {
    counter++;
    counterValue.textContent = counter;
});

decrementBtn.addEventListener('click', () => {
    counter--;
    counterValue.textContent = counter;
});

আমরা একটি counter ভেরিয়েবল 0 দিয়ে শুরু করছি।
তারপর, আমরা counter-value, increment-btn এবং decrement-btn আইডি দিয়ে HTML এলিমেন্টগুলোকে সিলেক্ট করি।
incrementBtn-এ একটি click ইভেন্ট যোগ করি যা counter এর মান ১ বাড়ায় এবং counterValue এর টেক্সট আপডেট করে।
decrementBtn-এ একটি click ইভেন্ট যোগ করি যা counter এর মান ১ কমায় এবং counterValue এর টেক্সট আপডেট করে।
২. রিয়্যাক্ট জেএস উদাহরণ
রিয়্যাক্ট জেএস-এ, আমরা একটি কম্পোনেন্ট তৈরি করবো যা ইউজার ইন্টারফেস এবং এর স্টেট ম্যানেজ করবে।

//================React ==============
২. রিয়্যাক্ট জেএস উদাহরণ
রিয়্যাক্ট জেএস-এ, আমরা একটি কম্পোনেন্ট তৈরি করবো যা ইউজার ইন্টারফেস এবং এর স্টেট ম্যানেজ করবে।
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h1>কাউন্টার: {count}</h1>
      <button onClick={() => setCount(count + 1)}>বাড়ান</button>
      <button onClick={() => setCount(count - 1)}>কমান</button>
    </div>
  );
}

export default Counter;
ব্যাখ্যা:

আমরা useState হুক ব্যবহার করে একটি স্টেট ভেরিয়েবল count এবং একটি ফাংশন setCount তৈরি করেছি।
যখন "বাড়ান" বোতামে ক্লিক করা হয়, setCount ফাংশন count এর মান ১ বাড়িয়ে দেয়।
যখন "কমান" বোতামে ক্লিক করা হয়, setCount ফাংশন count এর মান ১ কমিয়ে দেয়।
মূল পার্থক্য
ডম ম্যানিপুলেশন: ভ্যানিলা জাভাস্ক্রিপ্টে ডম ম্যানিপুলেশন সরাসরি করা হয়, যেখানে রিয়্যাক্টে ডম ম্যানিপুলেশন ইম্প্লিসিটভাবে ঘটে, যা কোডকে সহজ এবং ব্যবস্থাপনা-যোগ্য করে তোলে।
কোড রিয়্যুসেবিলিটি: রিয়্যাক্টের কম্পোনেন্ট-ভিত্তিক আর্কিটেকচার কোড পুনঃব্যবহারযোগ্যতা বাড়ায়।
স্টেট ম্যানেজমেন্ট: রিয়্যাক্টের স্টেট ম্যানেজমেন্ট সহজ এবং সহজবোধ্য, যা ডেভেলপারদের জন্য জটিল অ্যাপ্লিকেশনগুলি তৈরি করা সহজ করে তোলে।
এইভাবে, রিয়্যাক্ট জেএস ডেভেলপারদের জন্য কোড লেখা সহজ এবং দ্রুত করে তোলে যেখানে ভ্যানিলা জাভাস্ক্রিপ্টে কোড লিখতে হয় অনেক বিস্তারিতভাবে।